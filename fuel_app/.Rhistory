q()
q()
q()
?bzfile
a <- read.csv("repdata_data_StormData.csv")
a <- bzfile("repdata_data_StormData.csv")
a <- read.csv("a")
a <- bzfile("repdata_data_StormData.csv.bz2")
a <- read.csv("a")
a <- bzfile("repdata_data_StormData.csv.bz2", "r")
a <- read.csv("a")
a <- unzip("repdata_data_StormData.csv")
?unzip
stormData <- read.csv(bzfile("StormData.csv.bz2"))
storm.data <- read.csv(bzfile("repdata_data_StormData.csv"), stringsAsFactors = FALSE)
storm.data <- read.csv(bzfile("repdata_data_StormData.csv.bz2"), stringsAsFactors = FALSE)
a <- bzfile("repdata_data_StormData.csv.bz2")
b <- read.csv("a")
?bzfile
a <- bzfile("repdata_data_StormData.csv.bz2", "r")
b <- read.csv("a")
?read.csv
b <- read.csv("a", stringsAsFactors = FALSE)
unzip <- bzfile("repdata_data_StormData.csv.bz2", "r")
b <- read.csv(unzip, stringsAsFactors = FALSE)
?str
?str
str(stormData)
temp <- bzfile("repdata_data_StormData.csv.bz2")
stormData <- read.csv(temp)
View(stormData)
stormData$date <- as.Date(stormData$BGN_DATE, format = "%m/%d/%Y")
stormData$BGN_DATE <- as.Date(stormData$BGN_DATE, format = "%m/%d/%Y")
df <- select(stormData, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
df <- select(stormData, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
library(knitr)
library(ggplot2)
library(dplyr)
df <- select(stormData, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
df_by_event <- group_by(df, EVTYPE)
t <- tapply(df, FATALITIES, EVTYPE, sum)
t <- tapply(df$FATALITIES, df$EVTYPE, sum)
t
rm(t)
pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.%
arrange(desc(Fatalities), desc(Injuries))
View(pop_health)
pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.% arrange(desc(Fatalities), desc(Injuries))
(pop_health <- pop_health[1:10, ])
pop_health <- pop_health[1:10, ]
View(pop_health)
df <- select(stormData, BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
df_by_event <- group_by(df, EVTYPE, STATE)
pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.% arrange(desc(Fatalities), desc(Injuries))
View(pop_health)
pop_health <- pop_health[1:10, ]
View(pop_health)
?summarise
pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.% arrange(desc(Fatalities), desc(Injuries))
View(pop_health)
t <- tapply(pop_health$STATE, pop_health$EVTYPE, sum)
t <- tapply(pop_health$STATE, pop_health$EVTYPE, sum, na.rm = TRUE)
t <- tapply(pop_health$FATALITIES, pop_health$EVTYPE, sum, na.rm = TRUE)
t <- tapply(pop_health$STATE, pop_health$EVTYPE, sum, na.rm = TRUE)
t <- tapply(pop_health$STATE, pop_health$EVTYPE, sum)
t <- tapply(pop_health$FATALITIES, pop_health$STATE, sum)
tail(pop_health)
> df <- select(stormData, BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
> df_by_event <- group_by(df, EVTYPE, STATE)
> pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.% arrange(desc(Fatalities), desc(Injuries))
> View(pop_health)
> pop_health <- pop_health[1:10, ]
df <- select(stormData, BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
> df_by_event <- group_by(df, EVTYPE, STATE)
> pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.% arrange(desc(Fatalities), desc(Injuries))
> View(pop_health)
> pop_health <- pop_health[1:10, ]
pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.% arrange(desc(Fatalities), desc(Injuries))
df_by_event <- group_by(df, EVTYPE)
pop_health <- summarise(df_by_event, Fatalities = sum(FATALITIES), Injuries = sum(INJURIES)) %.% arrange(desc(Fatalities), desc(Injuries))
library(ggplot2)
View(pop_health)
pop_health <- pop_health[1:10,]
View(pop_health)
qplot(EVTYPE, Fatalities, pop_health)
qplot(EVTYPE, Fatalities, data = pop_health)
g <- qplot(EVTYPE, Fatalities, data = pop_health)
g + geom_text()
g + geom_text(label = EVTYPE)
g <- ggplot(EVTYPE, Fatalities, data = pop_health)
pop_health <- pop_health[1:15,]
qplot(EVTYPE, Fatalities, data = pop_health)
g1 <- ggplot(pop_health, aes(x = EVTYPE, y = Fatalities)
)
g1
g1 + geom_text()
g1 <- ggplot(pop_health, aes(x = EVTYPE, y = Fatalities, label = rownames(pop_health))
)
g1 + geom_text()
pop_health <- pop_health[1:10,]
g1 <- ggplot(pop_health, aes(x = EVTYPE, y = Fatalities, label = rownames(EVTYPE))
)
g1 + geom_text()
ggplot(pop_health, aes(y= Fatalities, label=EVTYPE))+
geom_point() +geom_text(aes(label=EVTYPE))
ggplot(pop_health, aes(x = EVTYPE, y= Fatalities, label=EVTYPE))+
geom_point() + geom_text(aes(label=EVTYPE))
g1 <- ggplot(pop_health, aes(x = EVTYPE, y = Fatalities)) +
geom_bar()
g1
g1 <- ggplot(pop_health, aes(x = EVTYPE, y = Fatalities)) +
geom_bar(stat = "identity")
g1
g2 <- ggplot(pop_health, aes(x = EVTYPE, y = Injuries)) +
geom_bar(stat = "identity")
multiplot(g1, g2)
library(ggplot2)
multiplot(g1, g2)
g2
require(grid)
multiplot(g1, g2)
library(grid)
library(gridExtra)
install.packages("gridExtra")
library(grid)
library(gridExtra)
grid.arrange(q1, q2, nrow = 2, main = "Main title")
grid.arrange(g1, g2, nrow = 2, main = "Main title")
g2 <- ggplot(pop_health, aes(x = EVTYPE, y = Injuries, color = green)) +
geom_bar(stat = "identity")
g2
g2 <- ggplot(pop_health, aes(x = EVTYPE, y = Injuries, fill = EVTYPE)) +
geom_bar(stat = "identity")
g2
g2 <- ggplot(pop_health, aes(y = Injuries, fill = EVTYPE)) +
geom_bar(stat = "identity")
g2
ecoConsequence <- summarise(newStromData, Property = sum(PROPDMG), Crop = sum(CROPDMG)) %.% arrange(desc(Property), desc(Crop))
TotalEcoConsequence <- summarise(newStromData, Combined_Impact = sum(PROPDMG) + sum(CROPDMG)) %.% arrange(desc(Combined_Impact))
ecoConsequence <- summarise(newStormmData, Property = sum(PROPDMG), Crop = sum(CROPDMG)) %.% arrange(desc(Property), desc(Crop))
TotalEcoConsequence <- summarise(newStormData, Combined_Impact = sum(PROPDMG) + sum(CROPDMG)) %.% arrange(desc(Combined_Impact))
ecoConsequence <- summarise(newStormData, Property = sum(PROPDMG), Crop = sum(CROPDMG)) %.% arrange(desc(Property), desc(Crop))
geom_bar(stat = "identity")
ecoConsequence <- summarise(df_by_event, Property = sum(PROPDMG), Crop = sum(CROPDMG)) %.% arrange(desc(Property), desc(Crop))
View(ecoConsequence)
TotalEcoConsequence <- summarise(df_by_event, Combined_Impact = sum(PROPDMG) + sum(CROPDMG)) %.% arrange(desc(Combined_Impact))
View(TotalEcoConsequence)
p1 <- ggplot (harmHealth, aes(x = EVTYPE, y = Fatalities, fill = EVTYPE)) + geom_bar (stat = "identity") + ggtitle ("Fatalities by weather event type") + theme(axis.ticks = element_blank(), axis.text.x = element_blank())
q()
library(binom)
install.packages("binom")
?t.test
error <- qt(0.975,df=8-1)*30/sqrt(9)
error
1100 - 23.64
1100 + 23.64
round(qt(.95, df = 8) * -2 / 3, 2)
round(qt(.95, df = 8) * -2 / 3, 1)
round(qt(.975, df = 8) * 1 / 3, 2)
-2+.77
q()
z <- qnorm(0.05)
z
m <- 12 + z * 4/ sqrt(100)
m
a <- mean(c(140, 138, 150, 148,135))
b <- mean (c(132, 135, 151, 146,130))
t.test(a, b, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
b <- c(132, 135, 151, 146,130)
a <- c(140, 138, 150, 148,135)
t.test(a, b, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
t.test(a, b, paired = FALSE, alternative="two.sided")$p.value
t.test(a, b, alternative="two.sided")$p.value
t.test(a, b, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
hyp <- c(140, 138, 150, 148,135)
sample <- c(132, 135, 151, 146,130)
mean (sample)
m <- mean (sample)
mh <- mean (hyp)
ssd <- sd (sample)
t <- (m - mh)/(ssd/sqrt(5))
pval <- 2 * pt(t, 4)
pt(t, 4)
t <- (mh - m)/(ssd/sqrt(5))
pval <- 2 * pt(t, 4)
qnorm(.025)
ans <- round(pbinom(2, prob = .5, size = 4, lower.tail = FALSE),4)
ans
ppois(9, 1, lower.tail = False)
ppois(9, 1, lower.tail = FALSE)
ppois(9, 1)
x <- ppois(9, 1)
1-x
ppois(9, 10, lower.tail = FALSE)
ppois(9, 17.87, lower.tail = FALSE)
ppois(9, 17.87)
n <- (qnorm(.95) + qnorm(.9)) ^ 2 * .04 ^ 2 / .01^2
> hyp <- c(140, 138, 150, 148,135)
> sample <- c(132, 135, 151, 146,130)
> mean (sample)
[1] 138.8
> m <- mean (sample)
> mh <- mean (hyp)
> ssd <- sd (sample)
> t <- (m - mh)/(ssd/sqrt(5))
> pval <- 2 * pt(t, 4)
> pt(t, 4)
hyp <- c(140, 138, 150, 148,135)
sample <- c(132, 135, 151, 146,130)
mean (sample)
[1] 138.8
m <- mean (sample)
mh <- mean (hyp)
ssd <- sd (sample)
t <- (m - mh)/(ssd/sqrt(5))
pval <- 2 * pt(t, 4)
pt(t, 4)
m1 <- 44; m2 <- 42.04
n1 <- n2 <- 288
s <- 12
se <- s * sqrt(1 / n1 + 1 / n2)
ts <- (m2 - m1) / se
pv <- 2 * pnorm(-abs(ts))
ts
pv
ppois(9, 1, lower.tail = FALSE)
2 * ppois(9, 1, lower.tail = FALSE)
1-.983
ppois(99, 1, lower.tail = FALSE)
ppois(9, 1, lower.tail = FALSE)
ppois(0.55, 1, lower.tail = FALSE)
ppois(0.557, 1, lower.tail = FALSE)
ppois(0.6, 1, lower.tail = FALSE)
ppois(0.5, 1, lower.tail = FALSE)
library(shiny)
install.packages("shiny")
library(shiny)
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
runapp()
runApp()
runApp()
library(rcharts)
install.packages("rcharts")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("devtools")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages('base64enc')
devtools::install_github('ramnathv/rCharts')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rcharts)
require(rcharts)
require(rCharts)
library(rCharts)
library(airquality)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
View(airquality)
d
install.packages("googleVis")
q()
library(shiny)
runApp("06_tabsets")
library(shiny)
runExample("01_hello")
runApp("fuel_app")
library('devtools')
library(shinyapps)
devtools::install_github("rstudio/shinyapps")
library(shinyapps)
library(shiny)
library(shinyapps)
library(devtools)
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
?selectInput
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
?numericInput
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
?radioButtons
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
?numericInput
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
?textOutput
shiny::runApp('fuel_app')
?renderText
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
?paste
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
?renderPrint
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
runApp("fuel_app", display.mode = "showcase")
shiny::runApp('fuel_app')
runApp("fuel_app", display.mode = "showcase")
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
diabetesRisk  <- function(glucose) {
glucose / 200
}
diabetesRisk(100)
shiny::runApp('fuel_app')
q()
shiny::runApp()
shiny::runApp()
biomass <- function (fuel, qty, units) {
if (fuel == "LPG") {
ifelse (units == "tons/day", op <- qty*12000/3900,
ifelse (units == "kL/day", op <- qty * 0.54 * 12000/3900,
op <- qty*(12000/3900)/1000
)
)
}
if (fuel == "Diesel") {
ifelse (units == "tons/day", op <- qty *10700/3900,
ifelse (units == "kL/day", op <- qty * 0.83 * 10700/3900,
op <- qty*(10700/3900)/1000
)
)
}
if (fuel == "Furnace oil") {
ifelse (units == "tons/day", op <- qty *9900/3900,
ifelse (units == "kL/day", op <- qty * 0.97 * 9900/3900,
op <- qty*(9900/3900)/1000
)
)
}
if (fuel == "Propane") {
ifelse (units == "tons/day", op <- qty *12025/3900,
ifelse (units == "kL/day", op <- qty * 0.493 * 12025/3900,
op <- qty*(12025/3900)/1000
)
)
}
print (paste (round (op, digits = 2), "tons/day"))
}
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
shiny::runApp('fuel_app')
q()
library(devtools)
library(slidify)
setwd("./test)
setwd("./test")
setwed("./")
setwd("./")
setwd("~/")
setwd("~/D:/datascience/All working files/")
setwd("~/D:/datascience/All working files")
setwd("~/D/datascience/All working files")
setwd("/D:/datascience/All working files")
setwd("D:/datascience/All working files")
setwd("./fuelslidify")
setwd("./fuelslidify/")
setwd("./fuelslidify")
author("fueldeck")
shiny::runApp('D:/datascience/All working files/fuel_app')
reqBiomass <- function (fuel, qty, units) {
if (fuel == "LPG") {
ifelse (units == "tons/day", op <- qty*12000/1100,
ifelse (units == "kL/day", op <- qty * 0.54 * 12000/1100,
op <- qty*(12000/1100)/1000
)
)
}
print(round (op, digits = 2))
}
reqBiomass <- function (fuel, qty, units) {
if (fuel == "LPG") {
ifelse (units == "tons/day", op <- qty*12000/1100,
ifelse (units == "kL/day", op <- qty * 0.54 * 12000/1100,
op <- qty*(12000/1100)/1000
)
)
}
print(round (op, digits = 2))
}
reqBiomass(LPG, 10, tons/day)
reqBiomass <- function (fuel, qty, units) {
if (fuel == "LPG") {
ifelse (units == "tons/day", op <- qty*12000/1100,
ifelse (units == "kL/day", op <- qty * 0.54 * 12000/1100,
op <- qty*(12000/1100)/1000
)
)
}
print(round (op, digits = 2))
}
reqBiomass("LPG", 10, "tons/day")
reqBiomass <- function (fuel, qty, units) {
if (fuel == "LPG") {
ifelse (units == "tons/day", op <- qty*12000/1100,
ifelse (units == "kL/day", op <- qty * 0.54 * 12000/1100,
op <- qty*(12000/1100)/1000
)
)
}
print(paste(round (op, digits = 2), "tons/day"))
}
reqBiomass("LPG", 10, "tons/day")
plantCapacity <- function (fuel, qty, units) {
if (fuel == "LPG") {
ifelse (units == "tons/day", op <- qty*12000/1100,
ifelse (units == "kL/day", op <- qty * 0.54 * 12000/1100,
op <- qty*(12000/1100)/1000
)
)
}
op1 <- (op *1000* 1100/3900)/(0.7*24)
print(paste (round (op1, digits = 2), "kg/hr"))
}
plantCapacity("LPG", 10, "tons/day")
plantCapacity("LPG", 10, "tons/day")
slidify("index.Rmd")
library(knitr)
browseURL("index.Rmd")
browseURL('index.Rmd')
browseURL("index.html")
shiny::runApp('D:/datascience/All working files/fuel_app')
shiny::runApp('D:/datascience/All working files/fuel_app')
